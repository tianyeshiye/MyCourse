Scheduler   ['ʃedju:lə(r)]  n.调度程序

retail  英 [ˈri:teɪl]  vt.  零售;零卖;转述;传播

timeline  时间轴，时间表


Spark 任务调度之创建Executor
https://blog.csdn.net/u011564172/article/details/69922241


spark executor内幕解密
https://blog.csdn.net/a11a2233445566/article/details/54615365

Spark作业调度
https://www.colabug.com/1829071.html


Spark 动态资源分配(Dynamic Resource Allocation) 解析
https://blog.csdn.net/allwefantasy/article/details/50564477

spark中的动态executor分配
https://blog.csdn.net/u014393917/article/details/50630829



Spark 任务调度概述
https://blog.csdn.net/u011564172/article/details/65653617

32 Spark中的Executor工作原理
https://blog.csdn.net/sinat_25306771/article/details/51552347


java程序性能分析之thread dump和heap dump
https://www.cnblogs.com/toSeeMyDream/p/7151635.html
[Java基础] 使用JMAP dump及分析dump文件
https://www.cnblogs.com/0616--ataozhijia/p/4136312.html



Yarn中几个专用名称
https://www.cnblogs.com/xubiao/p/5689427.html

调度器（Scheduler）和
应用程序管理器（Applications Manager，ASM）
一個应用程序管理ApplicationMaster（AM）

1.ResourceManager（RM）
2.ApplicationMaster（AM）
　　RM只负责监控AM，在AM运行失败时候启动它，RM并不负责AM内部任务的容错，这由AM来完成
3.NodeManager（NM）　　　　NM是每个节点上的资源和任务管理器
4.Container               Container 是YARN中的资源抽象

YARN的资源管理和执行框架都是按主/从范例实现的——Slave ---节点管理器（NM）运行、监控每个节点，并向集群的Master---资源管理器(RM)报告资源的可用性状态，资源管理器最终为系统里所有应用分配资源。

Hadoop Yarn详解
https://blog.csdn.net/suifeng3051/article/details/49486927



Spark ON Yarn深度剖析
https://blog.csdn.net/qq_16103331/article/details/53401829

Spark UI界面原理
https://blog.csdn.net/dabokele/article/details/51843176


https://blog.csdn.net/jungegev587/article/details/75506390
Yarn与Memsos对比
最大的不同点在于他们所采用的scheduler：mesos让framework决定mesos提供的这个资源是否适合该job，从而接受或者拒绝这个资源。而对于yarn来说，决定权在于yarn，是yarn本身（自行替应用程序作主）决定这个资源是否适合该job，对于各种各样的应用程序来说或许这就是个错误的决定（这就是现代人为什么拒绝父母之命媒妁之言而选择自由婚姻的缘故吧）。所以从scaling的角度来说，mesos更scalable。

其次，yarn是MapReduce进化的产物，yarn从诞生之日起就是为hadoop jobs管理资源的（yarn也开始朝着mesos涉及的领域进军），yarn只为hadoop jobs提供了一个static partitioning。而mesos的设计目标是为各个框架（hadoop、spark、web services等）提供dynamical partitioning，让各个集群框架共用数据中心机器。
